import pandas as pd
import numpy as np
from toolz import partition_all
import os
import pickle
import numpy as np
import pandas as pd
from tensorflow.keras.models import load_model
import json


# ----------------------------------------------------------------------------------------------------
# 对应tempo2中模型管理的其他部分
# 跟模型分类 聚类 异常检测等无关
# 1、模型读取
# 2、模型输出
# 3、模型利用（分为机器学习ML和深度学习DL）
# ----------------------------------------------------------------------------------------------------

def model_load(path):
    """1、模型读取
    选择路径和文件类型，将模型导入
    Args:
        path:模型的路径
        typer：模型存储的文件格式
    return:model
    0528
    """
    typer = path.split('.')[1]
    if typer == 'pickle':
        model_path = path
        f = open(model_path, "rb")
        model = pickle.load(f)
        return (model)
    elif typer == 'h5':
        model_path = path
        model = load_model(model_path)
        return model
    '''
    elif typer=='pkl':
        model_path=path
        model=joblib(model_path)
        return model
    '''


def model_dump(adet_Model, path, typer='pickle'):
    """2、模型输出
    选择路径和文件类型，将模型导出
    Args:
        adet_Model：模型对象 object
        path:模型的存储路径
        typer：模型存储的文件格式
        0528
        open 必须打开一个文件而不是文件目录
    """
    if typer == 'pickle':
        model_path = path + '\model.' + typer
        f = open(model_path, "wb")
        pickle.dump(adet_Model, f)
    elif typer == 'h5':
        model_path = path + '\model.' + typer
        adet_Model.save(model_path)


def modelML_use(model, data, values_col=None):
    """3、ML模型利用
    选择路径和文件类型，将模型导入
    Args:
        adet_Model：模型对象 object
        data:df结构数据 必须保证特征样本的维度和模型训练时的维度一致，否则识别不了
        values_col=None,数据
    Return:
        model,data,y_pred(原始数据和模型主要是为了后续评估)
        对于ML分类模型 y_pred是
        0528
    """
    if isinstance(data, pd.DataFrame):
        if values_col == None:
            test_data = data.values
        else:
            test_data = data[values_col].values
        y_predict = model.predict(test_data)
        y_pred = pd.DataFrame(y_predict, columns=['y_pred'])
        return (model, data, y_pred)
    else:
        pass


def modelDL_use(model, data, model_typer="lstm", typer="sequential_predict", var_col=None):
    """4、DL模型利用
    使用训练好的深度学习模型对特征数据集进行预测（不特指时间序列预测)
    :param model: object,待使用的深度学习模型
    :param data: df，待使用该模型的特征样本数据（默认无标签）
    :param model_typer:str,选择加载的深度模型的具体的算法类型。可选：'lstm'和'cnn'。
    :param typer:可选'sequential_predict'和’Feature_label_set'。'sequential_predict'表示选择时序预测，’Feature_label_set'表示选择多维特征与标签的预测。
    :param var_col:list,元素为str,特征数据列对应的列名组成的列表，默认空表示除了最后一列/行之外的均为特征数据列

    :return:
           model:待使用的机器学习模型(object)
           data:待使用该模型的特征样本数据（默认无标签）(DataFrame)
           y_pred:结果集(DataFrame)
    by huazhe
    """

    if isinstance(data, pd.DataFrame):  # 判断数据是否为df格式
        if var_col == None:  #
            test_data = data.values
        else:
            test_data = data[var_col].values
        if typer == "sequential_predict":  # 判断数据是否为时序数据
            Feature_dim = 1  # 特征维数为1
            test_data = test_data.reshape(1, -1)  # 将时序数据转换为1行多列的形式，代表一个样本输入
            Inputstep = test_data.shape[1]
        elif typer == "Feature_label_set":
            Feature_dim = test_data.shape[1]
            Inputstep = test_data.shape[0]
        if model_typer == "lstm":
            x_test = np.reshape(test_data, (test_data.shape[0], Feature_dim, Inputstep))
        elif model_typer == "cnn":
            x_test = np.reshape(test_data, (test_data.shape[0], Inputstep, Feature_dim))
        y_predict = model.predict(x_test)  # 将模型对测试数据进行预测
        y_predict = y_predict.reshape(-1, 1)
        # y_predict=pd.DataFrame(y_predict,columns=["y_predict"])
        y_predict = pd.DataFrame(y_predict, columns=["y_pred"])
        return (model, data, y_predict)
    else:
        pass


# ----------------------------------------------------------------------------------------------------
#
# 伪造数据
#
# ----------------------------------------------------------------------------------------------------


def create_data():
    xx = "\"{\\\"0\\\": {\\\"0\\\": -2.4144015011090048, \\\"1\\\": -0.24653946152791922}, \\\"1\\\": {\\\"0\\\": -2.3728584419556644, \\\"1\\\": -0.23022522425957215}, \\\"2\\\": {\\\"0\\\": -2.3596252439909824, \\\"1\\\": -0.21657699264118802}, \\\"3\\\": {\\\"0\\\": -2.3520981430150876, \\\"1\\\": -0.22796329494460615}, \\\"4\\\": {\\\"0\\\": -2.409998850417421, \\\"1\\\": -0.16170319704332992}, \\\"5\\\": {\\\"0\\\": -2.4088590623395607, \\\"1\\\": -0.09094819850142759}, \\\"6\\\": {\\\"0\\\": -2.423814748182904, \\\"1\\\": -0.08386458644836296}, \\\"7\\\": {\\\"0\\\": -2.398761758283316, \\\"1\\\": -0.057810802483226856}, \\\"8\\\": {\\\"0\\\": -2.4307578968780033, \\\"1\\\": -0.04747784264804829}, \\\"9\\\": {\\\"0\\\": -2.3349840580751073, \\\"1\\\": 0.010220298288879676}, \\\"10\\\": {\\\"0\\\": -2.3446314098883434, \\\"1\\\": 0.029162242665810266}, \\\"11\\\": {\\\"0\\\": -2.3135666245381006, \\\"1\\\": 0.03214413943281332}, \\\"12\\\": {\\\"0\\\": -2.315257045726102, \\\"1\\\": 0.03905929962899183}, \\\"13\\\": {\\\"0\\\": -2.3457380039615394, \\\"1\\\": 0.0830840386517384}, \\\"14\\\": {\\\"0\\\": -2.2596985515471943, \\\"1\\\": 0.04513535861794613}, \\\"15\\\": {\\\"0\\\": -2.2440372696426443, \\\"1\\\": 0.0249650183711166}, \\\"16\\\": {\\\"0\\\": -2.1913967908792125, \\\"1\\\": -0.031609679049798584}, \\\"17\\\": {\\\"0\\\": -2.1295181530125493, \\\"1\\\": -0.07474547739472238}, \\\"18\\\": {\\\"0\\\": -2.1363041017202535, \\\"1\\\": -0.07476589924826217}, \\\"19\\\": {\\\"0\\\": -2.199527365053833, \\\"1\\\": -0.11297379122373233}, \\\"20\\\": {\\\"0\\\": -2.17228157157302, \\\"1\\\": -0.1218826832512146}, \\\"21\\\": {\\\"0\\\": -2.1971550899473686, \\\"1\\\": -0.14965969431797627}, \\\"22\\\": {\\\"0\\\": -2.1855070124883493, \\\"1\\\": -0.13608463317854647}, \\\"23\\\": {\\\"0\\\": -2.151051089406702, \\\"1\\\": -0.20624925622509294}, \\\"24\\\": {\\\"0\\\": -2.203304794442203, \\\"1\\\": -0.1707419882478997}, \\\"25\\\": {\\\"0\\\": -2.257268970390918, \\\"1\\\": -0.22585566737492624}, \\\"26\\\": {\\\"0\\\": -2.2811486197632713, \\\"1\\\": -0.18635980692522108}, \\\"27\\\": {\\\"0\\\": -2.275079222377674, \\\"1\\\": -0.1707734281608594}, \\\"28\\\": {\\\"0\\\": -2.341970570082408, \\\"1\\\": -0.16469911867454728}, \\\"29\\\": {\\\"0\\\": -2.3722672595886714, \\\"1\\\": -0.1589079692833199}, \\\"30\\\": {\\\"0\\\": -2.3680750200518967, \\\"1\\\": -0.15597898453684023}, \\\"31\\\": {\\\"0\\\": -2.424832732943125, \\\"1\\\": -0.1526513019854326}, \\\"32\\\": {\\\"0\\\": -2.4848603687796413, \\\"1\\\": -0.16817467418442514}, \\\"33\\\": {\\\"0\\\": -2.5178859009674817, \\\"1\\\": -0.2008057196399466}, \\\"34\\\": {\\\"0\\\": -2.492929422754436, \\\"1\\\": -0.19065084575922925}, \\\"35\\\": {\\\"0\\\": -2.47584911182599, \\\"1\\\": -0.0870476578732259}, \\\"36\\\": {\\\"0\\\": -2.429495047683274, \\\"1\\\": -0.11022814313052332}, \\\"37\\\": {\\\"0\\\": -2.393713725897198, \\\"1\\\": -0.13686999147555542}, \\\"38\\\": {\\\"0\\\": -2.3810426523034462, \\\"1\\\": -0.16296952500340486}, \\\"39\\\": {\\\"0\\\": -2.3306804679587745, \\\"1\\\": -0.13664609846805886}, \\\"40\\\": {\\\"0\\\": -2.3622498598891633, \\\"1\\\": -0.14079259556325022}, \\\"41\\\": {\\\"0\\\": -1.9677046123804494, \\\"1\\\": 0.8102757617054688}, \\\"42\\\": {\\\"0\\\": -1.6253069967889393, \\\"1\\\": 1.1385847386699672}, \\\"43\\\": {\\\"0\\\": -1.2447469437401957, \\\"1\\\": 1.4039843767204132}, \\\"44\\\": {\\\"0\\\": -0.9350499460183298, \\\"1\\\": 1.4149772147415827}, \\\"45\\\": {\\\"0\\\": 0.11800264890022756, \\\"1\\\": 1.3983120384224588}, \\\"46\\\": {\\\"0\\\": 1.4270060944468055, \\\"1\\\": 1.2047228260805523}, \\\"47\\\": {\\\"0\\\": 1.9216977388536665, \\\"1\\\": 1.1146515588620467}, \\\"48\\\": {\\\"0\\\": 2.0619776176799873, \\\"1\\\": 0.8907069584435344}, \\\"49\\\": {\\\"0\\\": 2.4133211246056216, \\\"1\\\": 0.6105958501676993}, \\\"50\\\": {\\\"0\\\": 2.5944000760535673, \\\"1\\\": 0.014877098160660901}, \\\"51\\\": {\\\"0\\\": 2.387644567312725, \\\"1\\\": 0.032669690842362736}, \\\"52\\\": {\\\"0\\\": 2.2270034516538937, \\\"1\\\": 0.0214129466840763}, \\\"53\\\": {\\\"0\\\": 1.9867295582266913, \\\"1\\\": -0.05805436119555135}, \\\"54\\\": {\\\"0\\\": 2.2303979937506533, \\\"1\\\": -0.03489283304170933}, \\\"55\\\": {\\\"0\\\": 1.938121933931146, \\\"1\\\": -0.028143684379802657}, \\\"56\\\": {\\\"0\\\": 1.986326698051824, \\\"1\\\": 0.016779011559150663}, \\\"57\\\": {\\\"0\\\": 1.9211102405789615, \\\"1\\\": -0.029673603668744834}, \\\"58\\\": {\\\"0\\\": 2.027421696822984, \\\"1\\\": -0.11545364008867404}, \\\"59\\\": {\\\"0\\\": 2.052028771431975, \\\"1\\\": -0.1627058776672718}, \\\"60\\\": {\\\"0\\\": 2.0427124351936388, \\\"1\\\": -0.17100064308101265}, \\\"61\\\": {\\\"0\\\": 2.2409306172053203, \\\"1\\\": -0.19699722665129635}, \\\"62\\\": {\\\"0\\\": 2.2044255087375273, \\\"1\\\": -0.1886603117372134}, \\\"63\\\": {\\\"0\\\": 2.4236036167118513, \\\"1\\\": -0.17080268220504566}, \\\"64\\\": {\\\"0\\\": 2.4151407964997786, \\\"1\\\": -0.17415770301404365}, \\\"65\\\": {\\\"0\\\": 2.4871721269109077, \\\"1\\\": -0.23959947446530927}, \\\"66\\\": {\\\"0\\\": 2.4862978931569355, \\\"1\\\": -0.2492007550701835}, \\\"67\\\": {\\\"0\\\": 2.540616520426056, \\\"1\\\": -0.20779550119006962}, \\\"68\\\": {\\\"0\\\": 2.752498640504902, \\\"1\\\": -0.1921045026141032}, \\\"69\\\": {\\\"0\\\": 2.7230084002049852, \\\"1\\\": -0.18125805335252612}, \\\"70\\\": {\\\"0\\\": 2.7027746113546818, \\\"1\\\": -0.1067259206237881}, \\\"71\\\": {\\\"0\\\": 2.5322124373072055, \\\"1\\\": -0.07061818368285765}, \\\"72\\\": {\\\"0\\\": 2.504932060475149, \\\"1\\\": -0.024875220620037598}, \\\"73\\\": {\\\"0\\\": 2.306463598355903, \\\"1\\\": -0.03456608157266165}, \\\"74\\\": {\\\"0\\\": 2.3643104771832677, \\\"1\\\": 0.004998820469916637}, \\\"75\\\": {\\\"0\\\": 2.416792668735944, \\\"1\\\": -0.0015311854187696722}, \\\"76\\\": {\\\"0\\\": 2.452370904925012, \\\"1\\\": -0.017216021286420205}, \\\"77\\\": {\\\"0\\\": 2.4467792217153677, \\\"1\\\": -0.023075905330533913}, \\\"78\\\": {\\\"0\\\": 2.355254816148005, \\\"1\\\": -0.11218684536540093}, \\\"79\\\": {\\\"0\\\": 2.135555326322958, \\\"1\\\": -0.10089589365283706}, \\\"80\\\": {\\\"0\\\": 2.1560450287071484, \\\"1\\\": -0.15828530646985192}, \\\"81\\\": {\\\"0\\\": 2.284824482748281, \\\"1\\\": -0.20016511089847625}, \\\"82\\\": {\\\"0\\\": 2.4098905685550287, \\\"1\\\": -0.24112367441356908}, \\\"83\\\": {\\\"0\\\": 2.4163036833344154, \\\"1\\\": -0.2551145061832746}, \\\"84\\\": {\\\"0\\\": 2.2103247134616217, \\\"1\\\": -0.17213766915164538}, \\\"85\\\": {\\\"0\\\": 2.151770880911769, \\\"1\\\": -0.19578301669511322}, \\\"86\\\": {\\\"0\\\": 2.0500779114668406, \\\"1\\\": -0.21992096129462496}, \\\"87\\\": {\\\"0\\\": 1.9925129313407823, \\\"1\\\": -0.3250309871126415}, \\\"88\\\": {\\\"0\\\": 1.9550211699364561, \\\"1\\\": -0.3171068159013222}, \\\"89\\\": {\\\"0\\\": 1.9007132508579994, \\\"1\\\": -0.19489500470060822}, \\\"90\\\": {\\\"0\\\": 1.9027645185633548, \\\"1\\\": -0.17832989271650282}}\""

    dic = json.loads(xx)
    dic = json.loads(dic)
    # print(dic)
    para_tmp = pd.DataFrame.from_dict(dic, orient='index')
    # print(para_tmp)

    coumnsL = para_tmp.columns.tolist()
    if len(coumnsL) >= 1:
        x, y = list(dic.values()), list(dic.keys())
        # print(x,y)
        sf = pd.DataFrame(x)
        sf.index = y
        para_tmp = sf
        para_tmp = para_tmp[coumnsL]
    return para_tmp


# ----------------------------------------------------------------------------------------------------
#
# 功能性函数
#
# ----------------------------------------------------------------------------------------------------


def get_second_from(start, end):
    """

    :param start:  2022-6-25 13:41:11
    :param end:  2022-6-25 13:42:06
    :return:
    """
    start = pd.to_datetime(start)
    end = pd.to_datetime(end)
    r = end - start
    return r.seconds


print(create_data())